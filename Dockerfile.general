# escape=`

# Set these with --build-arg year=2019 --build-arg bitness="" or similar
ARG year=2021
ARG bitness="-x86"

FROM oist/nipm_base:latest AS labview_prep
LABEL maintainer="Christian Butcher <christian.butcher@oist.jp>"
# Copy in the ARG values
ARG year
ARG bitness

# Change the default shell
SHELL ["powershell"]

# Allow execution of powershell scripts
# Add the appropriate feeds for 2021, 32-bit.
COPY AddFeeds.ps1 AddFeeds.ps1
RUN Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine ; `
	.\AddFeeds.ps1 -year ${env:year} -x64:(${env:bitness} -ne '-x86'); `
	nipkg update; `
	Remove-Item AddFeeds.ps1 ;

# Create and store the fake NIPKGs to satisfy dependencies
COPY FakePackageCreator_ByName.ps1 GetPackageInfo.ps1 ./
COPY template_nipkg template_nipkg
RUN Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine ; `
	.\FakePackageCreator_ByName.ps1 -Zip -versionPattern ${env:year}.Substring(2,2) -CleanCreatedFiles ; `
	Remove-Item -Recurse FakePackageCreator_ByName.ps1, GetPackageInfo.ps1, template_nipkg;

RUN Expand-Archive FakePackages.zip -DestinationPath "C:\Fake_NIPKGs_Feed\Store" ;`
	nipkg feed-create "C:\Fake_NIPKGs_Feed" "C:\Fake_NIPKGs_Feed\Store"; `
	nipkg feed-add --name="fake_nipkg_feed" --system "C:\Fake_NIPKGs_Feed"; `
	nipkg update; `
	Remove-Item FakePackages.zip

# Moved to the prep stage, since this is a) slow and b) the same for 32/64-bit and used in all images.
# This script is very slow - if you don't need DAQmx, consider removing it to speed up your image build
# However, it will have little impact on container execution times (just image build time)
COPY InstallDAQmxCore.ps1 InstallDAQmxCore.ps1
RUN .\InstallDAQmxCore.ps1 -year ${env:year} ; `
	Remove-Item InstallDAQmxCore.ps1;

FROM labview_prep AS labview_base_init
ARG year
ARG bitness

# ni-syscfg-labview-2019-support-x86, ni-vipm ; ` ?
# The 64-bit Mathscript module doesn't include a trailing "-en"
RUN nipkg.exe install --accept-eulas -y `
ni-labview-${env:year}-core${env:bitness}-en `
ni-certificates `
ni-labview-${env:year}-vi-analyzer-toolkit${env:bitness} `
ni-labview-${env:year}-aspt-toolkit${env:bitness} `
ni-labview-${env:year}-cdsim-module${env:bitness} `
"ni-labview-${env:year}-mathscript-module$(If (${env:bitness} -eq '-x86') { '-x86-en' } Else { '' })" `
ni-sv-toolkit-${env:year}${env:bitness} `
ni-visa-labview-${env:year}-support${env:bitness} ; `
if( $LASTEXITCODE.Equals(-125071) ) { `
	# Needs restart 
	Write-Output 'Exiting successfully' `
	exit 0 `
} else { `
	exit $LASTEXITCODE `
}

RUN nipkg.exe install --accept-eulas -y `
ni-daqmx `
ni-daqmx-labview-${env:year}-support${env:bitness} ;`
if( $LASTEXITCODE.Equals(-125071) ) { `
	# Needs restart 
	Write-Output 'Exiting successfully' `
	exit 0 `
} else { `
	exit $LASTEXITCODE `
}

# Command line is x86 for 32 and 64-bit images
RUN nipkg.exe install --accept-eulas -y `
	ni-labview-command-line-interface-x86 ;`
if( $LASTEXITCODE.Equals(-125071) ) { `
	# Needs restart 
	Write-Output 'Exiting successfully' `
	exit 0 `
} else { `
	exit $LASTEXITCODE `
}

# Activate LabVIEW
ARG LABVIEW_SERIAL_NUMBER
COPY activateLabVIEW.ps1 .
RUN .\activateLabVIEW.ps1 -Version "$(If (${env:year} -eq '2019') { '19.0001' } Else { '21.0000' })" -SerialNumber $env:LABVIEW_SERIAL_NUMBER; `
	Remove-Item activateLabVIEW.ps1

# Download and install G_CLI
ARG g_cli_url="https://github.com/JamesMc86/G-CLI/releases/download/v2.4.0/wiresmith_technology_lib_g_cli-2.4.0.5.vip"
RUN $ErrorActionPreference = 'Stop' ; `
	$ProgressPreference = 'SilentlyContinue' ; `
	Invoke-WebRequest -Uri $env:g_cli_url -OutFile g_cli.zip ; `
	Expand-Archive .\g_cli.zip -DestinationPath .\g_cli -Force ; `
	Remove-Item g_cli.zip ; 

# 64-bit version
FROM labview_base_init AS labview_base_init2
ARG year
ENV NatInstDir="C:\Program Files\National Instruments\\"
ARG INI_Path="C:\Program Files\National Instruments\LabVIEW ${year}\LabVIEW.ini"
# Copy an INI file to enable VI Server
COPY defaultLabVIEWIni.ini ${INI_Path}
# Copy an INI file to extend the timeout duration for LabVIEW CLI
ARG INI_Path_CLI="C:\Program Files\National Instruments\Shared\LabVIEW CLI\LabVIEWCLI.ini"
COPY LabVIEWCLI.ini ${INI_Path_CLI}

# 32-bit version
FROM labview_base_init AS labview_base_init2-x86
ARG year
ENV NatInstDir="C:\Program Files (x86)\National Instruments\\"
ARG INI_Path="C:\Program Files (x86)\National Instruments\LabVIEW ${year}\LabVIEW.ini"
# Copy an INI file to enable VI Server
COPY defaultLabVIEWIni.ini ${INI_Path}
# Copy an INI file to extend the timeout duration for LabVIEW CLI
ARG INI_Path_CLI="C:\Program Files (x86)\National Instruments\Shared\LabVIEW CLI\LabVIEWCLI.ini"
COPY LabVIEWCLI.ini ${INI_Path_CLI}

FROM labview_base_init2${bitness} AS labview_base
ARG year
ARG bitness

#ARG GCLI_DESTINATION="C:\Program Files (x86)\National Instruments\LabVIEW ${year}\\"
RUN Write-Host "Copying GCLI to final location: ${env:NatInstDir}LabVIEW ${env:year}" ; `
	Copy-Item -Path '.\g_cli\File Group 0\\*' -Destination "${env:NatInstDir}\"LabVIEW ${env:year}\"" -Recurse -Force; `
	Remove-Item -Path g_cli -Force -Recurse; 

# The _x64 MSI is used based on the OS, not the target LabVIEW bitness
RUN	Start-Process -Wait "\"${env:NatInstDir}LabVIEW ${env:year}\vi.lib\Wiresmith Technology\G CLI\Installation Support\G_CLI_x64.msi\"" -ArgumentList '-q', '-l* installation_log.txt'; 
# G-CLI is always in Program Files (not (x86)) when installed using the _x64 MSI.
RUN Start-Process -Wait '"C:\Program Files\G-CLI\g-cli.exe"' -ArgumentList "--version" -RedirectStandardOutput dummy.txt; cat dummy.txt; rm dummy.txt


FROM labview_base AS labview_base_gocd
# Allow the startup of ssh-agent in the image without enabling every run.
RUN Get-Service ssh-agent | Set-Service -StartupType Manual

# This is placed at the bottom to allow more easily rebuilding without reinstalling all of LabVIEW.
COPY go-agent.ps1 .
ARG GO_SERVER_URL="http://172.25.224.1:8153/go"
RUN $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest ($env:GO_SERVER_URL + '/admin/agent') -OutFile 'agent.jar'
RUN $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest ($env:GO_SERVER_URL + '/admin/agent-plugins.zip') -OutFile 'agent-plugins.zip'
RUN $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest ($env:GO_SERVER_URL + '/admin/tfs-impl.jar') -OutFile 'tfs-impl.jar'

# This only runs for 32-bit (-x86) in the scripts
FROM labview_base AS labview_extended
ARG year
ARG bitness

RUN nipkg.exe install --accept-eulas -y `
ni-labview-${env:year}-rt-module${env:bitness}-en `
"ni-lvrt-$(${env:year}.Substring(2,2)).0.0-crio-labview-support" `
"$($($(nipkg list ni-compactrio-$(${env:year}.Substring(2,2))*-realtime-support)[0] -split('\t'))[0])" `
ni-compactrio-c-series-labview-${env:year}-support${env:bitness} `
ni-compactrio-labview-${env:year}-support${env:bitness} ;`
if( $LASTEXITCODE.Equals(-125071) ) { `
	# Needs restart 
	Write-Output 'Exiting successfully' `
	exit 0 `
} else { `
	exit $LASTEXITCODE `
}

# Activate LabVIEW
ARG LABVIEW_SERIAL_NUMBER
COPY activateLabVIEW_RT.ps1 .
RUN .\activateLabVIEW_RT.ps1 -Version "$(If (${env:year} -eq '2019') { '19.0000' } Else { '21.0000' })" -SerialNumber $env:LABVIEW_SERIAL_NUMBER; `
	Remove-Item activateLabVIEW_RT.ps1

# Add the FPGA module?
#RUN nipkg.exe install --accept-eulas -y `
#ni-labview-2019-fpga-module-x86-en

FROM labview_extended AS labview_extended_gocd
# Allow the startup of ssh-agent in the image without enabling every run.
RUN Get-Service ssh-agent | Set-Service -StartupType Manual

# This is placed at the bottom to allow more easily rebuilding without reinstalling all of LabVIEW.
COPY go-agent.ps1 .
ARG GO_SERVER_URL="http://172.25.224.1:8153/go"
RUN $ProgressPreference = 'SilentlyContinue';`
	Invoke-WebRequest ($env:GO_SERVER_URL + '/admin/agent') -OutFile 'agent.jar';`
	Invoke-WebRequest ($env:GO_SERVER_URL + '/admin/agent-plugins.zip') -OutFile 'agent-plugins.zip';`
	Invoke-WebRequest ($env:GO_SERVER_URL + '/admin/tfs-impl.jar') -OutFile 'tfs-impl.jar'

# FROM labview_extended AS labview_visa
# ARG year
# ARG VISA_Url="https://download.ni.com/support/nipkg/products/ni-v/ni-visa/19.0/offline/ni-visa_19.0.0_offline.iso"
# RUN Invoke-WebRequest -Uri $env:VISA_Url -OutFile ni-visa_offline.iso `
# ; Mount-DiskImage -ImagePath "C:\ni-visa_offline.iso" `
# ;

# RUN nipkg.exe install --accept-eulas -y `
# ni-visa `
# ni-visa-labview-${year}-support-x86 `
# ni-visa-19.0.0-realtime-bin